#
# Copyright O Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#
# https://github.com/yeasy/docker-compose-files/tree/master/hyperledger
# This compose file will start a Hyperledger Fabric 1.0 MVE, including
# * 1 ca
# * 1 orderer
# * 4 peers in 2 orgs
# * cli for testing

version: '3.2'

services:
  ca.org1.9chain.net:
    image: "hyperledger/fabric-ca:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_ca_org1
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca_peerOrg1
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.9chain.net-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/783837619d2a4d5cec061ecd1166a0b61672af6dd4299609f7841dcd23063058_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org1.9chain.net-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/783837619d2a4d5cec061ecd1166a0b61672af6dd4299609f7841dcd23063058_sk
      - GODEBUG=netdns=go
    ports:
      - ${CA_ORG1_ECAP_PORT}:7054
    volumes:
      - ${FABRIC_DATA_PATH}/ca1:/etc/hyperledger/fabric-ca-server
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.9chain.net/ca/:/etc/hyperledger/fabric-ca-server-config
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'

  ca.org2.9chain.net:
    image: "hyperledger/fabric-ca:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_ca_org2
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca_peerOrg2
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.9chain.net-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/e66ce577056af956fd47f7a81b02aaa156aead22b4300cd0499738d4a3b7b9ec_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org2.9chain.net-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/e66ce577056af956fd47f7a81b02aaa156aead22b4300cd0499738d4a3b7b9ec_sk
      - GODEBUG=netdns=go
    ports:
      - ${CA_ORG2_ECAP_PORT}:7054
    volumes:
      - ${FABRIC_DATA_PATH}/ca2:/etc/hyperledger/fabric-ca-server
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.9chain.net/ca/:/etc/hyperledger/fabric-ca-server-config
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'

  ca.org3.9chain.net:
    image: "hyperledger/fabric-ca:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_ca_org3
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca_peerOrg3
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org3.9chain.net-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/c1300b33ba5ec51899314f5f7db8f7d56bfbfb50a508b8332d60737fe9eeff57_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org3.9chain.net-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/c1300b33ba5ec51899314f5f7db8f7d56bfbfb50a508b8332d60737fe9eeff57_sk
      - GODEBUG=netdns=go
    ports:
      - ${CA_ORG3_ECAP_PORT}:7054
    volumes:
      - ${FABRIC_DATA_PATH}/ca3:/etc/hyperledger/fabric-ca-server
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org3.9chain.net/ca/:/etc/hyperledger/fabric-ca-server-config
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'

  ca.org4.9chain.net:
    image: "hyperledger/fabric-ca:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_ca_org4
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca_peerOrg4
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org4.9chain.net-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/88bd4d32321b474a5909353b9b7be4c9be48453ff3653d49a3afcf636ba5cebe_sk
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.org4.9chain.net-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-config/88bd4d32321b474a5909353b9b7be4c9be48453ff3653d49a3afcf636ba5cebe_sk
      - GODEBUG=netdns=go
    ports:
      - ${CA_ORG4_ECAP_PORT}:7054
    volumes:
      - ${FABRIC_DATA_PATH}/ca4:/etc/hyperledger/fabric-ca-server
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org4.9chain.net/ca/:/etc/hyperledger/fabric-ca-server-config
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'

  orderer.9chain.net:
    image: "hyperledger/fabric-orderer:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_orderer
    restart: always
    environment:
      - ORDERER_GENERAL_LOGLEVEL=DEBUG
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - GODEBUG=netdns=go
    ports:
      - ${ORDERER_PORT}:7050
    volumes:
    - ${FABRIC_DATA_PATH}/orderer/orderer:/var/hyperledger/orderer
    - ${FABRIC_DATA_PATH}/orderer/production:/var/hyperledger/production
    - ${COMPOSE_PROJECT_PATH}/kafka/channel-artifacts/orderer.genesis.block:/var/hyperledger/orderer/orderer.genesis.block
    - ${COMPOSE_PROJECT_PATH}/crypto-config/ordererOrganizations/9chain.net/orderers/orderer.9chain.net/msp:/var/hyperledger/orderer/msp
    - ${COMPOSE_PROJECT_PATH}/crypto-config/ordererOrganizations/9chain.net/orderers/orderer.9chain.net/tls/:/var/hyperledger/orderer/tls
    external_links:
      - ${COMPOSE_PROJECT_NAME}_peer0.org1.9chain.net:peer0.org1.9chain.net
      - ${COMPOSE_PROJECT_NAME}_peer0.org2.9chain.net:peer0.org2.9chain.net
      - ${COMPOSE_PROJECT_NAME}_peer0.org3.9chain.net:peer0.org3.9chain.net
      - ${COMPOSE_PROJECT_NAME}_peer0.org4.9chain.net:peer0.org4.9chain.net
    command: orderer

  peer0.org1.9chain.net:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_peer0_org1
    restart: always
    depends_on:
      - orderer.9chain.net
    environment:
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CLUSTER_NETWORK}
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_DOCKER_HOSTCONFIG_MEMORY=268435456 #256M
      - CORE_PEER_ID=peer0.org1.9chain.net
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer0.org1.9chain.net:7051
      - GODEBUG=netdns=go
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    ports:
      - ${PEER0_ORG1_GRPC_PORT}:7051
      - ${PEER0_ORG1_EVENT_PORT}:7053
    volumes: # docker.sock is mapped as the default CORE_VM_ENDPOINT
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FABRIC_DATA_PATH}/org1/peer0:/var/hyperledger/production
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.9chain.net/peers/peer0.org1.9chain.net/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org1.9chain.net/peers/peer0.org1.9chain.net/tls:/etc/hyperledger/fabric/tls
    command: peer node start

  peer0.org2.9chain.net:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_peer0_org2
    restart: always
    depends_on:
      - orderer.9chain.net
    ports:
      - ${PEER0_ORG2_GRPC_PORT}:7051
      - ${PEER0_ORG2_EVENT_PORT}:7053
    environment:
      - CORE_PEER_ID=peer0.org2.9chain.net
      - CORE_PEER_LOCALMSPID=Org2MSP
      - CORE_PEER_ADDRESS=peer0.org2.9chain.net:7051
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CLUSTER_NETWORK}
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_DOCKER_HOSTCONFIG_MEMORY=268435456 #256M
      - GODEBUG=netdns=go
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FABRIC_DATA_PATH}/org2/peer0:/var/hyperledger/production
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.9chain.net/peers/peer0.org2.9chain.net/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org2.9chain.net/peers/peer0.org2.9chain.net/tls:/etc/hyperledger/fabric/tls
    command: peer node start

  peer0.org3.9chain.net:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_peer0_org3
    restart: always
    depends_on:
      - orderer.9chain.net
    ports:
      - ${PEER0_ORG3_GRPC_PORT}:7051
      - ${PEER0_ORG3_EVENT_PORT}:7053
    environment:
      - CORE_PEER_ID=peer0.org3.9chain.net
      - CORE_PEER_LOCALMSPID=Org3MSP
      - CORE_PEER_ADDRESS=peer0.org3.9chain.net:7051
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CLUSTER_NETWORK}
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_DOCKER_HOSTCONFIG_MEMORY=268435456 #256M
      - GODEBUG=netdns=go
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FABRIC_DATA_PATH}/org3/peer0:/var/hyperledger/production
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org3.9chain.net/peers/peer0.org3.9chain.net/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org3.9chain.net/peers/peer0.org3.9chain.net/tls:/etc/hyperledger/fabric/tls
    command: peer node start

  peer0.org4.9chain.net:
    image: "hyperledger/fabric-peer:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_peer0_org4
    restart: always
    depends_on:
      - orderer.9chain.net
    ports:
      - ${PEER0_ORG4_GRPC_PORT}:7051
      - ${PEER0_ORG4_EVENT_PORT}:7053
    environment:
      - CORE_PEER_ID=peer0.org4.9chain.net
      - CORE_PEER_LOCALMSPID=Org4MSP
      - CORE_PEER_ADDRESS=peer0.org4.9chain.net:7051
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${CLUSTER_NETWORK}
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      # The following setting skips the gossip handshake since we are
      # are not doing mutual TLS
      - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/tls/ca.crt
      - CORE_VM_DOCKER_HOSTCONFIG_MEMORY=268435456 #256M
      - GODEBUG=netdns=go
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${FABRIC_DATA_PATH}/org4/peer0:/var/hyperledger/production
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org4.9chain.net/peers/peer0.org4.9chain.net/msp:/etc/hyperledger/fabric/msp
      - ${COMPOSE_PROJECT_PATH}/crypto-config/peerOrganizations/org4.9chain.net/peers/peer0.org4.9chain.net/tls:/etc/hyperledger/fabric/tls
    command: peer node start

  cli: # client node
    image: "hyperledger/fabric-tools:${HLF_VERSION-1.0.0}"
    container_name: ${COMPOSE_PROJECT_NAME}_cli
    hostname: cli
    restart: always
    tty: true
    environment:
      #- GOPATH=/opt/gopath
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_LOGGING_FORMAT=%{color}[%{id:03x} %{time:01-02 15:04:05.00 MST}] [%{longpkg}] %{callpath} -> %{level:.4s}%{color:reset} %{message}
      - CORE_PEER_TLS_ENABLED=true  # to enable TLS, change to true
      - ORDERER_CA=/etc/hyperledger/fabric/crypto-config/ordererOrganizations/9chain.net/orderers/orderer.9chain.net/msp/tlscacerts/tlsca.9chain.net-cert.pem
      - GODEBUG=netdns=go
    depends_on:
      - orderer.9chain.net
      - peer0.org1.9chain.net
      - peer0.org2.9chain.net
      - peer0.org3.9chain.net
      - peer0.org4.9chain.net
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    volumes:
      - ${COMPOSE_PROJECT_PATH}/scripts:/tmp/scripts
      - ${COMPOSE_PROJECT_PATH}/crypto-config.yaml:/etc/hyperledger/fabric/crypto-config.yaml
      - ${COMPOSE_PROJECT_PATH}/crypto-config:/etc/hyperledger/fabric/crypto-config
      - ${COMPOSE_PROJECT_PATH}/kafka/configtx.yaml:/etc/hyperledger/fabric/configtx.yaml
      - ${COMPOSE_PROJECT_PATH}/kafka/channel-artifacts:/tmp/channel-artifacts
      - ${COMPOSE_PROJECT_PATH}/examples:/opt/gopath/src/examples
    command: bash -c 'sleep 60; cd /tmp; source scripts/func.sh; bash scripts/test_channel_create.sh; bash scripts/test_channel_join.sh; bash scripts/notaryinfo_install.sh; while true; do sleep 20180101; done'

  mysql: # mysql service
    image: mysql:5.7
    container_name: ${COMPOSE_PROJECT_NAME}_mysql
    hostname: mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=fabricexplorer
      - STARTUP_SQL=/fabricexplorer.sql
    volumes:
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/fabricexplorer.sql:/docker-entrypoint-initdb.d/fabricexplorer.sql
    expose:
      - "3306"
    command: mysqld

  kafka0:
    # official repo doesn't have latest tag, however, kafka changes version recently
    #image: yeasy/hyperledger-fabric-kafka:0.10.2.0
    image: "hyperledger/fabric-kafka:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_kafka0
    hostname: kafka0
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_BROKER_ID=0
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    expose:
      - '9092'

  kafka1:
    # official repo doesn't have latest tag, however, kafka changes version recently
    #image: yeasy/hyperledger-fabric-kafka:0.10.2.0
    image: "hyperledger/fabric-kafka:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_kafka1
    hostname: kafka1
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_BROKER_ID=1
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    expose:
      - '9092'

  kafka2:
    # official repo doesn't have latest tag, however, kafka changes version recently
    #image: yeasy/hyperledger-fabric-kafka:0.10.2.0
    image: "hyperledger/fabric-kafka:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_kafka2
    hostname: kafka2
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_BROKER_ID=2
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    expose:
      - '9092'

  kafka3:
    # official repo doesn't have latest tag, however, kafka changes version recently
    #image: yeasy/hyperledger-fabric-kafka:0.10.2.0
    image: "hyperledger/fabric-kafka:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_kafka3
    hostname: kafka3
    environment:
      - KAFKA_MESSAGE_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_REPLICA_FETCH_MAX_BYTES=1048576 # 1 * 1024 * 1024 B
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_BROKER_ID=3
      - KAFKA_MIN_INSYNC_REPLICAS=2
      - KAFKA_DEFAULT_REPLICATION_FACTOR=3
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2
    expose:
      - '9092'

  zookeeper0:
    image: "hyperledger/fabric-zookeeper:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_zookeeper0
    hostname: zookeeper0
    environment:
      - ZOO_MY_ID=1
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    expose:
      - '2181'
      - '2888'
      - '3888'

  zookeeper1:
    image: "hyperledger/fabric-zookeeper:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_zookeeper1
    hostname: zookeeper1
    environment:
      - ZOO_MY_ID=2
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    expose:
      - '2181'
      - '2888'
      - '3888'

  zookeeper2:
    image: "hyperledger/fabric-zookeeper:${HLF_VERSION-1.0.0}"
    restart: always
    tty: true
    container_name: ${COMPOSE_PROJECT_NAME}_zookeeper2
    hostname: zookeeper2
    environment:
      - ZOO_MY_ID=3
      - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    expose:
      - '2181'
      - '2888'
      - '3888'

  explorer:
    image: yeasy/blockchain-explorer:0.1.0-preview
    container_name: ${COMPOSE_PROJECT_NAME}_explorer
    hostname: explorer
    restart: always
    volumes:
      #- /home/share/workspace/go/src/github.com/hyperledger/blockchain-explorer:/blockchain-explorer
      - ${COMPOSE_PROJECT_PATH}/explorer-artifacts/config.json:/blockchain-explorer/config.json
      - ${COMPOSE_PROJECT_PATH}/crypto-config:/blockchain-explorer/first-network/crypto-config
    ports:
      #- "${DASHBOARD_PORT}:8080"
      - "8350:8080"
    depends_on:
      - mysql
      - orderer.9chain.net
      - peer0.org1.9chain.net
      - peer0.org2.9chain.net
      - peer0.org3.9chain.net
      - peer0.org4.9chain.net
    links:
      - orderer.9chain.net
      - peer0.org1.9chain.net
      - peer0.org2.9chain.net
      - peer0.org3.9chain.net
      - peer0.org4.9chain.net
    command: bash -c 'sleep 30; node main.js'
    #command: bash -c 'while true; do sleep 20180101; done'

  apisrv:
    image: registry.cn-hangzhou.aliyuncs.com/9chain/apisrv:0.1
    container_name: ${COMPOSE_PROJECT_NAME}_apisrv
    hostname: apisrv
    restart: always
    volumes:
      - ${FABRIC_DATA_PATH}/apisrv:/data
      - ${COMPOSE_PROJECT_PATH}:/home/share/workspace/go/src/github.com/hyperledger/cello/src/agent/docker/_compose_files/fabric-1.0/
      # for deug
      - /home/share/workspace/go/src/github.com/9chain/sdksrvd:/opt/workspace/sdksrvd
    environment:
      - NBCAPID_CFG_DIR=/data/nbcapid/cfg
    ports:
      - "127.0.0.1:9000:8080"
    depends_on:
      - explorer

networks:
  default:
    external:
      name: ${CLUSTER_NETWORK}